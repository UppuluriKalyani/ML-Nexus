# -*- coding: utf-8 -*-
"""Image Colorizer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1amEN4UJt8gKqlO0Q83XU-3sKnEzOB52B
"""

!git clone https://github.com/jantic/DeOldify.git DeOldify

cd DeOldify

from deoldify import device
from deoldify.device_id import DeviceId
#choices:  CPU, GPU0...GPU7
device.set(device=DeviceId.GPU0)

import torch

if not torch.cuda.is_available():
    print('GPU not available.')

!pip install -r requirements-colab.txt

import fastai
from deoldify.visualize import *
import warnings
warnings.filterwarnings("ignore", category=UserWarning, message=".*?Your .*? set is empty.*?")

!mkdir 'models'
!wget https://data.deepai.org/deoldify/ColorizeArtistic_gen.pth -O ./models/ColorizeArtistic_gen.pth

colorizer = get_image_colorizer(artistic=True)

source_url = 'https://upload.wikimedia.org/wikipedia/commons/2/2c/Golden_Gate_Bridge_bw.jpg' #@param {type:"string"}
render_factor = 35  #@param {type: "slider", min: 7, max: 40}
watermarked = True #@param {type:"boolean"}

if source_url is not None and source_url !='':
    image_path = colorizer.plot_transformed_image_from_url(url=source_url, render_factor=render_factor, compare=True, watermarked=watermarked)
    show_image_in_notebook(image_path)
else:
    print('Provide an image url and try again.')

"""**TO DEPLOY**

# New Section
"""

!pip install flask-ngrok # install flask-ngrok

pip install gunicorn

!pip install pyngrok
from pyngrok import ngrok

ngrok.set_auth_token("2nTi2qKopE2E3KPB2cjGikJ63Hm_6TxDRnKhHTUHhWhLpXdt5") # Replace with your actual authtoken
public_url = ngrok.connect(5000)

!pip install yt-dlp # Install the yt-dlp module using pip.
from flask import Flask, request, jsonify
from flask_cors import CORS
from io import BytesIO
from PIL import Image
import base64
from deoldify import device
from deoldify.device_id import DeviceId
import torch
import traceback
from pyngrok import ngrok
!pip install ffmpeg-python

# Use GPU if available
if torch.cuda.is_available():
    device.set(device=DeviceId.GPU0)
else:
    print('GPU not available. Using CPU.')

from deoldify.visualize import get_image_colorizer # This line should now work after installing yt-dlp

colorizer = get_image_colorizer(artistic=True)

def deoldify_process(img):
    # Ensure the image is in RGB mode
    img = img.convert('RGB')

    # Get the path to save the temporary image
    import tempfile
    import os

    with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:
        img_path = temp_file.name
        img.save(img_path)

    try:
        # Colorize the image
        result = colorizer.get_transformed_image(img_path, render_factor=35)

        # Convert the result to a PIL Image if it's not already
        if not isinstance(result, Image.Image):
            result = Image.fromarray(result)

        return result
    finally:
        # Clean up the temporary file
        os.unlink(img_path)

app = Flask(__name__)
CORS(app)

@app.route('/colorize', methods=['POST'])
def colorize_image():
    try:
        data = request.json
        if 'image' not in data:
            return jsonify({'error': 'No image data provided'}), 400

        # Decode the base64 image data
        image_data = base64.b64decode(data['image'])
        img = Image.open(BytesIO(image_data))

        # Process the image with DeOldify
        colorized_img = deoldify_process(img)

        # Convert the colorized image to base64
        buffered = BytesIO()
        colorized_img.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue()).decode()

        return jsonify({'colorizedImageUrl': f'data:image/png;base64,{img_str}'})
    except Exception as e:
        error_message = f"Error processing image: {str(e)}\n{traceback.format_exc()}"
        print(error_message)
        return jsonify({'error': error_message}), 500

if __name__ == '__main__':
    # Set your authtoken here
    ngrok.set_auth_token("2nTi2qKopE2E3KPB2cjGikJ63Hm_6TxDRnKhHTUHhWhLpXdt5")  # Replace with your actual authtoken

    # Open a ngrok tunnel to the HTTP server
    public_url = ngrok.connect(5000)
    print(f" * ngrok tunnel \"{public_url}\" -> \"http://127.0.0.1:5000/\"")

    # Start the Flask server
    app.run()